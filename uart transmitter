module uart-tx
# (
parameter DBIT = 8 , // # d a t a b i t s
SB-TICK = 16 // # t i c k s f o r s t o p b i t s
>
(
i n p u t wire clk, r e s e t ,
i n p u t wire tx-start , s-tick,
input w i r e [7:01 d i n ,
output reg tx-done-tick ,
output w i r e t x
1;
// synlbolic s t a t e d e c l a r a t i o n
(5 localparam [1:01
i d l e = 2'b00,
s t a r t = 2'b01,
d a t a = 2'b10,
s t o p = 2'bll;
?o
// s i g n a l d e c l a r a t i o n
r e g [I: 01 s t a t e - r e g , s t a t e - n e x t ;
reg [3:0] s - r e g , s-next;
reg [2:0] n-reg, n-next;
2.; reg [7:01 b-reg , b-next;
reg t x - r e g , tx-next ;
// bod?/
// FSMD s t a t e & d a t a r e g i s t e r s
o always Q(posedge clk, posedge r e s e t )
i f ( r e s e t )
begin
s t a t e - r e g <= i d l e ;
s - r e g <= 0 ;
n-reg <= 0 ;
b-reg <= 0 ;
t x - r e g <= l'bl;
end
e l s e
begin
s t a t e - r e g <= s t a t e - n e x t ;
s - r e g <= s-next;
n - r e g <= n - n e x t ;
b - r e g <= b - n e x t ;
tx-reg <= t x - n e x t ;
end
// FSMD n e x t - s t a t e l o g i c & f u n c t i o n a l u n i t s
always Q*
so begin
s t a t e - n e x t = s t a t e - r e g ;
tx-done-tick = lJbO;
s - n e x t = s - r e g ;
n - n e x t = n - r e g ;
b - n e x t = b - r e g ;
t x - n e x t = tx-reg ;
c a s e ( s t a t e - r e g )
i d l e :
begin
t x - n e x t = l'bl;
i f (tx-start)
begin
s t a t e - n e x t = s t a r t ;
s - n e x t = 0 ;
b-next
end
s t o p :
begin
tx-next = 1 'bl;
i f (s-tick)
i f (s-reg==(SB-TICK -1))
begin
s t a t e - n e x t = i d l e ;
tx-done-tick = l'bl;
end
e l s e
s-next = s-reg + 1;
end
endcase
IIO end
// o u t p u t
a s s i g n t x = tx-reg;
endmodule
